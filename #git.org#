#+title: git
#+auther: derut

* git 始めました

- いつの間にか github で非公開リポジトリが作れるようになってたので作ってみた←情報が古い
- Google Drive とか使ってもできるよ！って書いてあるサイトもあったけどどうやってやるの？ってなった←理解してないだけ
- dotfile を git で管理するのはカッコイイと思う←実用性は特に…どっちかっていうと Windows を使うことが多いので git もないし……デフォルトで入れてくれないかな？


環境: Windows10 64bit, cygwin64（ｴｯ）

環境への言いわけ: ViM が使いたかった。でも ViM ってシェルがないと使いづらいし gViM で :e C:\Users\なんちゃら～～～ とかやってられない。
emacsならdiredがあったから問題なかったのかも知れない。
gViMに vimshell とかという手もあったけど Windows のフォルダ構成がね

* git 初期設定
今回は github 使うのでアカウントを作った。

[[https://github.com/]]

いまじゃデスクトップ版もあって便利な時代になったな（知ったかぶり）

POSIXなら ~/.netrc に
#+begin_src .netrc
machine github.com
login **@*.com
password **************
#+end_src
（メアドとパスワードは自分で設定したのに）
とかやると幸せになれる。
#+BEGIN_SRC sh
$ git config --global user.name "UserName"
$ git config --global user.email "user@email.com"
#+END_SRC
ssh接続するなら
#+BEGIN_SRC sh
$ ssh-keygen -t rsa -b 4096 -C "user@email.com"
$ chmod 600 ~/.ssh     ←なってなかったら
$ chmod 600 ~/.ssh/*
#+END_SRC
~/.ssh/configには
#+BEGIN_SRC config
Host github
  Hostname github.com
  User git
  IdentityFile ~/.ssh/id_rsa
#+END_SRC
とか入れておく。[[https://github.com/settings/keys]] > New SSH key に id_rsa.pub（の中身の文字列）を登録。


あとは適当なリポジトリを作って（コマンドラインはまだよくわかってないのでブラウザで…）、
#+begin_src sh
$ git clone https://github.com/derut144/reminder
$ cd reminder
$ vim README.org
#+end_src
みたいな？
Markdown じゃなくてわざわざ Emacs org-mode にしてるのに ViM かよってツッコミはもう入れました。
初期設定で git init ってあるけどリモートからクローンしてきたら別に…

変更が終わったら
#+begin_src sh
$ git add .
$ git commit -m "ほげほげ"
$ git push
#+end_src
最初の git add . をやってなくてエラーが出ててちょっと困ってた。だって見てたサイトに書いてないんだもん！（やつあたり）

- git add [file name] で [file name]をインデックスに追加。.はワイルドカード。
- git commit -m "コメント"でコミットする。（預けるとか委託ってぐらいの意味？） 
  -m オプションはコメント指定できる。つけないとエディタが開く。-a 
  オプションは変更したファイルのみコミットするらしい… git add . 
  しなくてもいいような気もするけどできたりできなかったり？（よくわかってない）
- git push [リモートのサーバ名] [デフォルトのブランチ名]。定型文だと git push 
  origin master でいい。でも git push だけでもできる。複雑なことをやる人はもうちょっとあるらしい。

[[http://dqn.sakusakutto.jp/2011/10/git_push_origin_master.html]] 
originとかmasterについて解説されてた。origin がリモートのサーバ名（git@github.com:derut144/reminder.git）の短縮名。
masterはmaster:masterの略でローカルのmasterをリモートのmasterに送るよ！って意味。

よくわからないときは三つともやってれば何とかなる！（よくわかってない人）
というかブラウザでやるとGUIで一番楽だったりするのかも知れない。


あと dotfiles をアップしてたときに ViM plugin とか emacs-lisp とかで git clone してたのがあって
git submodule しろよって怒られた。
#+BEGIN_SRC sh
$ git submodele add https://github.com/derut144/reminder
#+END_SRC
みたいにする。

ファイルを削除するときは
#+BEGIN_SRC sh
$ git rm hoge.hoge
#+END_SRC
する。でもローカルで rm hoge.hoge して git add . してコミットして push したら消せる（外道なのかも知れないけど）。


コマンド
| git status    | 状態確認                   |
| git remote -v | リモートレポジトリの確認   |
| git push      | リモートへ変更を反映       |
| git pull      | ローカルへダウンロードする |
| git clone     | リポジトリをクローン       |
| git add       | ローカルの変更を登録       |
| git commit    | 変更をコミットする         |

* github pages + jekyll
gem で jekyllをインスコ
#+begin_src sh
$ gem install bundler jekyll
#+end_src

Gemfileは [[https://github.com/github/pages-gem]] よりとってきた
#+begin_src sh
$ bundle install --path vendor/bundle
#+end_src



github pages
/username/ .

* まだ未解決
zshが補完してくれない
#+begin_src sh
mkdir ~/.zsh/completion/
cd ~/.zsh/completion/
curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.zsh
mv git-completion.zsh _git
#+end_src
して、.zshrcに
#+begin_src .zshrc
# brew じゃない
fpath=(~/.zsh/completion $fpath)

# 補完機能有効にする
autoload -U compinit
compinit -u
#+end_src
ってやってるのに何でだろう？
ついでに
#+begin_src sh
rm -f ~/.zsh/.zcompdump; compinit
#+end_src
もやってるんだけどな
