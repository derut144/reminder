#+title: git
#+auther: derut

* git 始めました

- いつの間にか github で非公開リポジトリが作れるようになってたので作ってみた←情報が古い
- Google Drive とか使ってもできるよ！って書いてあるサイトもあったけどどうやってやるの？ってなった←理解してないだけ
- dotfile を git で管理するのはカッコイイと思う←実用性は特に…どっちかっていうと Windows を使うことが多いので git もないし……デフォルトで入れてくれないかな？

環境: Windows10 64bit, cygwin64（ｴｯ）

環境への言いわけ: ViM が使いたかった。でも ViM ってシェルがないと使いづらいし gViM で :e C:\Users\なんちゃら～～～ とかやってられない。
emacsならdiredがあったから問題なかったのかも知れない。
gViMに vimshell とかという手もあったけど Windows のフォルダ構成がね

* git 初期設定
今回は github 使うのでアカウントを作った。

[[https://github.com/]]
いまじゃデスクトップ版もあって便利な時代になったな（知ったかぶり）

POSIXなら ~/.netrc に
#+begin_src .netrc
machine github.com
login **@*.com
password **************
#+end_src
（メアドとパスワードは自分で設定したのに）
とかやると幸せになれる。
#+BEGIN_SRC sh
$ git config --global user.name "UserName"
$ git config --global user.email "user@email.com"
#+END_SRC
ssh接続するなら
#+BEGIN_SRC sh
$ ssh-keygen -t rsa -b 4096 -C "user@email.com"
$ chmod 600 ~/.ssh     ←なってなかったら
$ chmod 600 ~/.ssh/*
#+END_SRC
~/.ssh/configには
#+BEGIN_SRC config
Host github
  Hostname github.com
  User git
  IdentityFile ~/.ssh/id_rsa
#+END_SRC
とか入れておく。[[https://github.com/settings/keys]] > New SSH key に id_rsa.pub（の中身の文字列）を登録。


あとは適当なリポジトリを作って（コマンドラインはまだよくわかってないのでブラウザで…）、
#+begin_src sh
$ git clone https://github.com/{username}/{repo}
$ cd {repo}
$ vim README.org
#+end_src
みたいな？
Markdown じゃなくてわざわざ Emacs org-mode にしてるのに ViM かよってツッコミはもう入れました。
初期設定で git init ってあるけどリモートからクローンしてきたら別に…

変更が終わったら
#+begin_src sh
$ git add .
$ git commit -m "ほげほげ"
$ git push
#+end_src
最初の git add . をやってなくてエラーが出ててちょっと困ってた。だって見てたサイトに書いてないんだもん！（やつあたり）
- git add [file name] で [file name]をインデックスに追加。.はワイルドカード。
- git commit -m "コメント"でコミットする。（預けるとか委託ってぐらいの意味？） 
  -m オプションはコメント指定できる。つけないとエディタが開く。-a 
  オプションは変更したファイルのみコミットするらしい… git add . 
  しなくてもいいような気もするけどできたりできなかったり？（よくわかってない）
- git push [リモートのサーバ名] [デフォルトのブランチ名]。定型文だと git push 
  origin master でいい。でも git push だけでもできる。複雑なことをやる人はもうちょっとあるらしい。

[[http://dqn.sakusakutto.jp/2011/10/git_push_origin_master.html]] 
originとかmasterについて解説されてた。origin がリモートのサーバ名（git@github.com:derut144/reminder.git）の短縮名。
masterはmaster:masterの略でローカルのmasterをリモートのmasterに送るよ！って意味。

よくわからないときは三つともやってれば何とかなる！（よくわかってない人）
というかブラウザでやるとGUIで一番楽だったりするのかも知れない。


あと dotfiles をアップしてたときに ViM plugin とか emacs-lisp とかで git clone してたのがあって
git submodule しろよって怒られた。
#+BEGIN_SRC sh
$ git submodele add https://github.com/derut144/reminder
#+END_SRC
みたいにする。

ファイルを削除するときは
#+BEGIN_SRC sh
$ git rm hoge.hoge
#+END_SRC
する。でもローカルで rm hoge.hoge して git add . してコミットして push したら消せる（外道なのかも知れないけど）。


コマンド
| git status    | 状態確認                   |
| git remote -v | リモートレポジトリの確認   |
| git push      | リモートへ変更を反映       |
| git pull      | ローカルへダウンロードする |
| git clone     | リポジトリをクローン       |
| git add       | ローカルの変更を登録       |
| git commit    | 変更をコミットする         |

* github pages + jekyll
** jekyll
gem で jekyllをインスコ
#+begin_src sh
$ gem install bundler jekyll
#+end_src

Gemfileは [[https://github.com/github/pages-gem]] よりとってきた
#+begin_src Gemfile
source "https://rubygems.org"
gem 'github-pages', group: :jekyll_plugins
#+end_src

https://qiita.com/stkdev/items/0e2df27736acbea9bd26
https://qiita.com/koyo-miyamura/items/5ec89ac9689be49a55f6

https://acaird.github.io/computers/2013/05/24/blogging-with-org-and-git
** github pages
{username}.github.io
でリポジトリを作る

** インストールはしたけれど……？
よくわからなかった！（自慢できない）
一度まっさらになって
[[http://jekyllrb-ja.github.io/]] の [[http://jekyllrb-ja.github.io/docs/step-by-step/01-setup/][step-by-step]] を見ながら見本を作った。
上で書いた Gemfile のことは忘れた
#+begin_src sh
$ jekyll serve
#+end_src
して [[http://localhost:4000]] にアクセスフラッシュ！
（ ~bundle exec jekyll serve~ すると 「Gemfile で定義されたjekyllのバーションを使用できます。」だって）
上の方のサイトみると ~jekyll serve~ って ~jekyll s~ って短縮できるらしい。

サイトの構築は
#+begin_src sh
$ jekyll build
#+end_src

https://qiita.com/daddygongon/items/9b7182db29861744fc79#step-by-step
何かテーマでも入れようとしたらエラー。
困ったときは ~bundle update~ （知らないけど）。

でも ~An error occured while installing nokogiri (1.10.7)~ とか何とか……。
まあ多分おま環。
ええい！ 言われるがままに ~gem install nokogiri -v '1.10.7' --source 'https://rubygem.org/'~ とかやってやる！

俺は無力だ……

でもGoogle先生に聞けば大抵のことは……。
_config.ymlに
#+begin_src Gemfile
exclude: ['Gemfile','Gemfile.lock','Rakefile','vendor']
#+end_src
を追加してみる。
（ [[https://github.com/great-h/great-h.github.io/issues/586][ビルド時に vendor ディレクトリ以下を無視させる #586]] より）

………ダメだったぉ…
というかエラーメッセージを見てなかった
#+begin_src sh
$ gem install nokogiri -- --use-system-libraries
#+end_src
やれって書いてあった……これで通った、と思ったでしょ？
でも ~bundle update~ でまたつまづくんだこれが。

[[https://qiita.com/thunders/items/101c6b329830fb1fb27d]]

#+begin_src sh
$ bundle config build.nokogiri --use-system-libraries
#+end_src
これでようやく通ったぜ……。
この時点で ~bundle exec jekyll s~ しなきゃいけなくなってる。面倒な

テーマはとりあえず何でもいいんだけど
_config.ymlに
#+begin_src _config.yml
theme: jekyll-theme-minimal
#+end_src
みたいに書く。

で、[[https://qiita.com/daddygongon/items/9b7182db29861744fc79#step-by-step]]
ここを見て _layout/defaults.html を
#+begin_src html
<!DOCTYPE html>
<html lang="{{ site.lang | default: "en-US" }}">
  <head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

{% seo %}
    <link rel="stylesheet" href="{{ '/assets/css/style.css' | relative_url }}">
    <link rel="stylesheet" href="{{ '/assets/css/styles.css' | relative_url }}">
    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js"></script>
    <![endif]-->
  </head>
  <body>
    <div class="wrapper">
      <header>
    <div align="right">
      {% include navigation.html %}
    </div>

    <h1><a href="{{ "/" | absolute_url }}">{{ site.title | default: site.github.repository_name }}</a></h1>

        {% if site.logo %}
          <img src="{{site.logo | relative_url}}" alt="Logo" />
        {% endif %}

        <p>{{ site.description | default: site.github.project_tagline }}</p>

        {% if site.github.is_project_page %}
        <p class="view"><a href="{{ site.github.repository_url }}">View the Project on GitHub <small>{{ site.github.repository_nwo }}</small></a></p>
        {% endif %}

        {% if site.github.is_user_page %}
        <p class="view"><a href="{{ site.github.owner_url }}">View My GitHub Profile</a></p>
        {% endif %}

        {% if site.show_downloads %}
        <ul class="downloads">
          <li><a href="{{ site.github.zip_url }}">Download <strong>ZIP File</strong></a></li>
          <li><a href="{{ site.github.tar_url }}">Download <strong>TAR Ball</strong></a></li>
          <li><a href="{{ site.github.repository_url }}">View On <strong>GitHub</strong></a></li>
        </ul>
        {% endif %}
      </header>
      <section>

      {{ content }}

      </section>
      <footer>
        {% if site.github.is_project_page %}
        <p>This project is maintained by <a href="{{ site.github.owner_url }}">{{ site.github.owner_name }}</a></p>
        {% endif %}
        <p><small>Hosted on GitHub Pages &mdash; Theme by <a href="https://github.com/orderedlist">orderedlist</a></small></p>
      </footer>
    </div>
    <script src="{{ '/assets/js/scale.fix.js' | relative_url }}"></script>
    {% if site.google_analytics %}
    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
      ga('create', '{{ site.google_analytics }}', 'auto');
      ga('send', 'pageview');
    </script>
    {% endif %}
  </body>
</html>
#+end_src
とした。

Blog以外のコンテンツが思いつかなくてHomeすら書くことがなかったんでHomeにBlogの内容を書くことでお茶を濁した。

* まだ未解決
zshが補完してくれない
#+begin_src sh
mkdir ~/.zsh/completion/
cd ~/.zsh/completion/
curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.bash
curl -O https://raw.github.com/git/git/master/contrib/completion/git-completion.zsh
mv git-completion.zsh _git
#+end_src
して、.zshrcに
#+begin_src .zshrc
# brew じゃない
fpath=(~/.zsh/completion $fpath)

# 補完機能有効にする
autoload -U compinit
compinit -u
#+end_src
ってやってるのに何でだろう？
ついでに
#+begin_src sh
rm -f ~/.zsh/.zcompdump; compinit
#+end_src
もやってるんだけどな
